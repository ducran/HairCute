import mediapipe as mp
import cv2
import numpy as np
import gradio as gr

# Initialisation de Mediapipe pour la détection des visages
mp_face_mesh = mp.solutions.face_mesh

# Recommandations de coiffures selon la forme du visage
hairstyle_recommendations = {
    "oval": ["Coupe courte", "Dégradé", "Coupe mi-longue"],
    "round": ["Volume sur le dessus", "Coupe asymétrique", "Franges"],
    "square": ["Franges", "Coupe en dégradé léger", "Coupe texturée"],
    "heart": ["Coupe mi-longue", "Franges légères", "Coupe dégradée"],
    "diamond": ["Coupe volumineuse", "Boucles", "Frange asymétrique"],
}

def get_face_shape(landmarks):
    """
    Analyse les traits du visage pour déterminer la forme.
    :param landmarks: Points de repère du visage (np.array).
    :return: Forme du visage (str).
    """
    jaw_width = np.linalg.norm(landmarks[0] - landmarks[16])  # Largeur de la mâchoire
    face_height = np.linalg.norm(landmarks[8] - landmarks[27])  # Hauteur du visage

    if jaw_width / face_height > 1.3:
        return "round"
    elif jaw_width / face_height > 1.1:
        return "square"
    elif face_height / jaw_width > 1.6:
        return "oval"
    else:
        return "heart"

def analyze_face(file_path):
    """
    Analyse l'image téléchargée pour détecter la forme du visage et recommander des coiffures.
    :param file_path: Chemin du fichier image téléchargé.
    :return: Texte contenant les formes détectées et les recommandations.
    """
    try:
        # Charger l'image
        image = cv2.imread(file_path)
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        with mp_face_mesh.FaceMesh(static_image_mode=True, max_num_faces=1) as face_mesh:
            result = face_mesh.process(rgb_image)

        if not result.multi_face_landmarks:
            return "Aucun visage détecté. Veuillez essayer une autre image."

        # Obtenir les points du visage
        landmarks = result.multi_face_landmarks[0].landmark
        chin_landmarks = np.array([[landmark.x, landmark.y] for landmark in landmarks])

        # Déterminer la forme du visage
        facial_shape = get_face_shape(chin_landmarks)
        recommendations = hairstyle_recommendations.get(facial_shape, ["Pas de recommandation disponible"])

        return f"Forme : {facial_shape}\nRecommandations : {', '.join(recommendations)}"

    except Exception as e:
        return f"Une erreur est survenue lors de l'analyse : {str(e)}"

# Interface Gradio optimisée
iface = gr.Interface(
    fn=analyze_face,
    inputs=gr.Image(type="filepath", label="Téléchargez une image de votre visage"),
    outputs=gr.Textbox(label="Recommandations de coiffures"),
    live=False,  # Désactiver le mode en direct pour améliorer les performances
    title="App_VO1 - Analyse de Forme de Visage",
    description="Téléchargez une image de votre visage et recevez des recommandations de coiffures basées sur la forme de votre visage.",
    allow_flagging="never"  # Désactiver le marquage des erreurs pour un usage simplifié
)

# Lancer l'application
iface.launch()
